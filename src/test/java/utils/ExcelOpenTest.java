package utils;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Workbook;
import org.junit.Assert;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Objects;

import static org.junit.Assert.assertArrayEquals;
import static org.testng.Assert.assertEquals;
import static utils.ExcelOpen.fillArrayWithValues;

class ExcelOpenTest {
    private static final String LANGUAGE_RUSSIAN = "Rus";
    private static final String LANGUAGE_ENGLISH = "Eng";
    private static final String[] RUSSIAN_EXCEL_ARRAY = new String[]{"ноль", "один", "два", "три", "четыре", "пять", "шесть",
            "семь", "восемь", "девять", "десять", "одиннадцать", "двенадцать", "тринадцать", "четырнадцать", "пятнадцать",
            "шестнадцать", "семнадцать", "восемнадцать", "девятнадцать", "двадцать", "тридцать", "сорок", "пятьдесят",
            "шестьдесят", "семьдесят", "восемьдесят", "девяноста", "сто", "двести", "триста", "четыреста", "пятьсот",
            "шестьсот", "семьсот", "восемьсот", "девятьсот", "тысяч", "миллион", "миллиард", "триллион", "квадриллион",
            "квинтиллион", "секстиллион", "септиллион", "октиллион", "нониллион", "дециллион", "андециллион", "дуодециллион",
            "тридециллион", "квадридециллион", "квинтидециллион", "секстидециллион", "септидециллион", "октидециллион",
            "нонидециллион", "децидециллион"};
    private static final String[] ENGLISH_EXCEL_ARRAY = new String[]{"zero", "one", "two", "three", "four", "five", "six", "seven",
            "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen",
            "eighteen", "nineteen", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety",
            "one hundred", "two hundred", "three hundred", "four hundred", "five hundred", "six hundred", "seven hundred",
            "eight hundred", "nine hundred", "thousand", "million", "billion", "trillion", "quadrillion", "quintillion",
            "sextillion", "septillion", "octillion", "quintillion", "decillion", "andecillion", "duodecillion", "tridecillion",
            "quadrillion", "quintidecillion", "sextidecillion", "septidecillion", "octidecillion", "nonidecillion", "decidecillion"};
    private static final String[] RUSSIAN_DIFFERENCE_EXCEL_ARRAY = new String[]{"ноль", "один", "два", "три", "четыре"};
    private static final String[] ENGLISH_DIFFERENCE_EXCEL_ARRAY = new String[]{"zero", "one", "two"};

    private static String partest1;
    private static String partest2;
    private static String partest3;
    private static String partest4;
    private static String NameTestFile = "TestCellString.xls";

    @BeforeAll
    static void beforeTest() {
        ClassLoader classLoader = ExcelOpenTest.class.getClassLoader();

        FileInputStream fileInputStream = null;
        Workbook workbook = null;
        try {
            fileInputStream = new FileInputStream(Objects.requireNonNull(classLoader.getResource(NameTestFile)).getFile());
            workbook = new HSSFWorkbook(fileInputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }

        partest1 = ExcelOpen.convertCell(workbook.getSheetAt(0).getRow(0).getCell(0));
        partest2 = ExcelOpen.convertCell(workbook.getSheetAt(0).getRow(1).getCell(0));
        partest3 = ExcelOpen.convertCell(workbook.getSheetAt(0).getRow(2).getCell(0));
        partest4 = ExcelOpen.convertCell(workbook.getSheetAt(0).getRow(3).getCell(0));

        try {
            if (fileInputStream != null) fileInputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    void arraypartest1() {
        assertEquals("Текст", partest1);
    }

    @Test
    void arraypartest2() {
        assertEquals("12345.0", partest2);
    }

    @Test
    void arraypartest3() {
        assertEquals("Mon Oct 09 00:00:00 MSD 2000", partest3);
    }

    @Test
    void arraypartest4() {
        assertEquals("2.3", partest4);
    }

    @Test
    void compareValueToEqualsThemOnRussian() {
        assertArrayEquals(RUSSIAN_EXCEL_ARRAY, fillArrayWithValues(LANGUAGE_RUSSIAN));
    }

    @Test
    void compareValueToNotEqualsThemOnRussian() {
        Assert.assertNotEquals(RUSSIAN_DIFFERENCE_EXCEL_ARRAY, fillArrayWithValues(LANGUAGE_RUSSIAN));
    }

    @Test
    void compareValueToEqualsThemOnEnglish() {
        assertArrayEquals(ENGLISH_EXCEL_ARRAY, fillArrayWithValues(LANGUAGE_ENGLISH));
    }

    @Test
    void compareValueToNotEqualsThemOnEnglish() {
        Assert.assertNotEquals(ENGLISH_DIFFERENCE_EXCEL_ARRAY, fillArrayWithValues(LANGUAGE_ENGLISH));
    }
}